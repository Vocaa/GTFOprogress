@page "/"
@using GTFOprogress.Models
@using GTFOprogress.Common
@using GTFOprogress.Services
@using GTFOprogress.Components

@inject IConfiguration _config
@inject StateHandlerService _stateHandler

<!--##################################################################-->
<!--##################################################################-->
<!--##################################################################-->

<h3>Version: @_config["version"]</h3>

<div class="columns-2">
    @if (rundowns != null)
    {
        foreach (Rundown rundown in rundowns)
        {
            <div class="break-inside-avoid-column basis-full">
                <RundownComponent rundown="rundown" />
            </div>
        }
    }
</div>

<!--##################################################################-->
<!--##################################################################-->
<!--##################################################################-->

@code {
    List<Rundown>? rundowns;

    protected override async Task OnInitializedAsync()
    {
        await _stateHandler.InitializeState();
        rundowns = _stateHandler.GetRundowns();
    }

    public Level getTestLevelData()
    {
        return new Level
            {
                Name = "R2E1",
                Title = "THE TEST",
                Tier = Tier.E,
                Stage = 1,
                Secondary = false,
                Overload = true,
            };
    }
}
