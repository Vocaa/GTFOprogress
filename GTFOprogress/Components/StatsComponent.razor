@using GTFOprogress.Services
@using GTFOprogress.Models

@inject SettingsService _settings

<div>
    <div>
        <div>Main</div>
        <div>@main</div>
    </div>
    <div>
        <div>Secondary</div>
        <div>@secondary</div>
    </div>
    <div>
        <div>Overload</div>
        <div>@overload</div>
    </div>
    <div>
        <div>Pris. Effic.</div>
        <div>@prisonerEfficiency</div>
    </div>
</div>

@code {
    [Parameter]
    public Rundown rundown { get; set; }

    string main;
    string secondary;
    string overload;
    string prisonerEfficiency;

    protected override Task OnInitializedAsync()
    {
        SetValues();
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        SetValues();
        return base.OnParametersSetAsync();
    }

    protected void SetValues()
    {
        switch(_settings.GetSetting("CompletionFormat"))
        {
            case "percent":
                main = $"{rundown.GetCompletedLevelsCount() / rundown.Levels.Count} %";
                secondary = $"{rundown.GetCompletedSecondariesCount() / rundown.GetTotalSecondariesCount()} %";
                overload = $"{rundown.GetCompletedOverloadCount() / rundown.GetTotalOverloadCount()} %";
                prisonerEfficiency = $"{rundown.GetCompletedPECount() / rundown.GetTotalPECount()} %";
                break;
            case "fraction":
                main = $"{rundown.GetCompletedLevelsCount()} / {rundown.Levels.Count}";
                secondary = $"{rundown.GetCompletedSecondariesCount()} / {rundown.GetTotalSecondariesCount()}";
                overload = $"{rundown.GetCompletedOverloadCount()} / {rundown.GetTotalOverloadCount()}";
                prisonerEfficiency = $"{rundown.GetCompletedPECount()} / {rundown.GetTotalPECount()}";
                break;
            default:
                break;
        }
    }

}
