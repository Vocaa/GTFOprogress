@using GTFOprogress.Models
@using GTFOprogress.Common
@using GTFOprogress.Services

@inject StateHandlerService _stateHandler

<!--##################################################################-->
<!--##################################################################-->
<!--##################################################################-->

<div class="@level.LevelCompletion level-card flex items-start p-1 border-solid rounded-sm border-y-4 border-r-4 border-l-[12px] cursor-default select-none" @onclick='() => updateState("completion")'>
    @if (level != null)
    {
        <div class="title">@level.Name</div>
        <div class="task-list" @onclick:stopPropagation="true">
            <div class="@level.SecondaryState task" @onclick='() => updateState("secondary")'></div>
            <div class="@level.OverloadState task" @onclick='() => updateState("overload")'></div>
            <div class="@level.PrisonerEfficiency task" @onclick='() => updateState("prisoner")'></div>
        </div>
    }
</div>

<style>
    .level-card {

    }

    .title {
        margin: 0px;
        display:inline;
        line-height: 1;  
    }

    .task-list {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding: 0px;
        width: auto;
        max-width: auto;
    }

    .task {
        width: 7px;
        height: 7px;
        padding: 0px;
        margin: 1px;
        font-size: 10px;
        cursor: default;
    }

    .level-card.Empty {
        color: rgba(255, 255, 255, 0);
        border-color: rgba(255, 255, 255, 0);
        cursor: not-allowed;
    }

    .level-card.Incomplete {
        color: rgba(255, 255, 255, 0.5);
        border-color: rgba(255, 255, 255, 0.5);
    }

    .level-card.Complete {
        color: rgba(255, 255, 255, 1);
        border-color: rgba(255, 255, 255, 1);
    }

    /* For .task */
    .task.Empty {
        background-color: rgba(255, 255, 255, 0);
        border-color: rgba(255, 255, 255, 0.2);
        border-width: 0.5px;
        border-style: solid;
        cursor: not-allowed;
    }

    .task.Incomplete {
        background-color: rgba(255, 255, 255, 0.5);
        border-color: rgba(255, 255, 255, 0.5);
    }

    .task.Complete {
        background-color: rgba(255, 255, 255, 1);
        border-color: rgba(255, 255, 255, 1);
    }
</style>

<!--##################################################################-->
<!--##################################################################-->
<!--##################################################################-->

@code {
    [Parameter]
    public Level? level { get; set; }

    public void updateState(string ts)
    {
        switch (ts)
        {
            case "completion":
                level.LevelCompletion = ToggleState(level.LevelCompletion);
                break;
            case "secondary":
                level.SecondaryState = ToggleState(level.SecondaryState);
                break;
            case "overload":
                level.OverloadState = ToggleState(level.OverloadState);
                break;
            case "prisoner":
                level.PrisonerEfficiency = ToggleState(level.PrisonerEfficiency);
                break;
            default:
                return;

        }
        _stateHandler.SaveState();
        StateHasChanged();
    }

    public TaskState ToggleState(TaskState ts)
    {
        switch (ts)
        {
            case TaskState.Empty:
                return ts;
                break;
            case TaskState.Incomplete:
                return TaskState.Complete;
                break;
            case TaskState.Complete:
                return TaskState.Incomplete;
                break;
            default:
                return ts;
                break;
        }
    }
}
